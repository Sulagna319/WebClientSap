package pageaction;

import org.apache.log4j.Logger;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.NoSuchWindowException;
import org.openqa.selenium.interactions.Actions;
import org.testng.Assert;
import pagelocators.WebViewerPageLocators;;
import util.LoggerHelper;
import util.WebDriverHelper;
import java.util.Iterator;
import java.util.Set;

public class WebViewerPageActions {

    public WebViewerPageLocators webViewerPageLocators;
    Logger log = LoggerHelper.getLogger(WebViewerPageActions.class);


    public void titleValidationViewer() {

        try {

            Thread.sleep(2000);
            Set<String> handler = WebDriverHelper.driver.getWindowHandles();
            Iterator<String> it = handler.iterator();
            String parentWindow = it.next();

            if (it.hasNext()) {

                String childWindow = it.next();
                WebDriverHelper.driver.switchTo().window(childWindow);
                Assert.assertEquals("Document view", WebDriverHelper.driver.getTitle());

            } else log.info("No view Tab");


        } catch (NoSuchElementException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public void sideRotation(String sideRotation) {

        webViewerPageLocators = new WebViewerPageLocators();
        String pageTitle = WebDriverHelper.driver.getTitle();
        log.info("The current page title is " + pageTitle);
        WebDriverHelper.driver.switchTo().frame("pdfjsFrame");

        if (sideRotation.equalsIgnoreCase("Right")) {

            try {
                Thread.sleep(2000);
                webViewerPageLocators.RotateRight.click();
                Thread.sleep(5000);
                log.info("Document rotated right!!");

            } catch (NoSuchElementException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        } else if (sideRotation.equalsIgnoreCase("Left")) {

            try {
                Thread.sleep(2000);
                log.info("Document rotated left!!");
                Thread.sleep(5000);
                webViewerPageLocators.RotateLeft.click();
            } catch (NoSuchElementException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }


    }


    public void closeViewer() throws InterruptedException {
        WebDriverHelper.driver.switchTo().defaultContent();

        try {
        webViewerPageLocators.CloseViewerButton.click();
        log.info("Closing the viewer tab!!");
        Thread.sleep(3000);
        WebDriverHelper.driver.switchTo().alert().accept();
        log.info("Leave viewer tab!!");
        Thread.sleep(3000);
        } catch (NoSuchWindowException e) {
            e.printStackTrace();
        } catch (NoSuchElementException e) {
            e.printStackTrace();
    }}

    public void clickPrint() {

        webViewerPageLocators = new WebViewerPageLocators();

        try {
            String pagetitle = WebDriverHelper.driver.getTitle();
            log.info("The current page title is " + pagetitle);
            WebDriverHelper.driver.switchTo().frame("pdfjsFrame");
            Thread.sleep(2000);
            webViewerPageLocators.ViewerPrint.click();
            Thread.sleep(5000);
            log.info("Print Document!!");

        } catch (NoSuchElementException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

    }

    public void zoomOptions(String zoom) {

        webViewerPageLocators = new WebViewerPageLocators();
        String pageTitle = WebDriverHelper.driver.getTitle();
        log.info("The current page title is " + pageTitle);
        WebDriverHelper.driver.switchTo().frame("pdfjsFrame");

        if (zoom.equalsIgnoreCase("Plus")) {

            try {
                Thread.sleep(2000);
                webViewerPageLocators.ZoomIn.click();
                webViewerPageLocators.ZoomIn.click();
                webViewerPageLocators.ZoomIn.click();
                Thread.sleep(5000);
                log.info("Document zoomed in!!");

            } catch (NoSuchElementException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        } else if (zoom.equalsIgnoreCase("Minus")) {

            try {
                Thread.sleep(2000);
                webViewerPageLocators.ZoomOut.click();
                webViewerPageLocators.ZoomOut.click();
                webViewerPageLocators.ZoomOut.click();
                Thread.sleep(5000);
                log.info("Document zoomed out!!");

            } catch (NoSuchElementException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        } else if (zoom.equalsIgnoreCase("RubberBand")) {

            try {
                Thread.sleep(2000);
                webViewerPageLocators.RubberbandZoom.click();
                Thread.sleep(2000);
                Actions a = new Actions(WebDriverHelper.driver);
                a.moveToElement(webViewerPageLocators.ZoomPageViewer).clickAndHold().moveByOffset(20, 70).release().build().perform();
                Thread.sleep(5000);
                log.info("RubberBand zoomed document!!");

            } catch (NoSuchElementException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        } else if (zoom.equalsIgnoreCase("MagnifingGlass")) {

            try {
                Thread.sleep(2000);
                webViewerPageLocators.MagnifyZoom.click();
                Thread.sleep(5000);
                log.info("Magnifing document!!");

            } catch (NoSuchElementException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        } else log.info("Wrong option selected!!");
    }

    public void dovViewOptions(String view) {

        webViewerPageLocators = new WebViewerPageLocators();
        String pageTitle = WebDriverHelper.driver.getTitle();
        log.info("The current page title is " + pageTitle);
        WebDriverHelper.driver.switchTo().frame("pdfjsFrame");

        if (view.equalsIgnoreCase("Fit To Window ")) {
            try {
                Thread.sleep(2000);
                webViewerPageLocators.FitToWindow.click();
                Thread.sleep(5000);
                log.info("Document Fitted To Window!!");

            } catch (NoSuchElementException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        } else if (view.equalsIgnoreCase("Fit To Height")) {

            try {
                Thread.sleep(2000);
                webViewerPageLocators.FitToHeight.click();
                Thread.sleep(5000);
                log.info("Document Fitted To Height!!");

            } catch (NoSuchElementException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        } else if (view.equalsIgnoreCase("Fit To Width")) {

            try {
                Thread.sleep(2000);
                webViewerPageLocators.FitToWidth.click();
                Thread.sleep(5000);
                log.info("Document Fitted To Width!!");

            } catch (NoSuchElementException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }


    }


}




